1. Installing and Running Webpack and Webpack-CLI
  - npm init -y
  - npm install webpack webpack-cli --save-dev
{
  "name": "23-2-webpack-fcc",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
  + "start": "webpack",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "Temesghen Tekeste",
  "license": "ISC",
  "devDependencies": {
    "webpack": "^5.13.0",
    "webpack-cli": "^4.3.1"
  }
}

Note: By default npm start looks for a file index.js inside the src folder to run otherwise it will cause an error.
****************************************************************************

2. Imports and Exports and Moduels

Webpack now bundling all our app code

- We use import/export to indicate dependencies
- Webpack makes sure everything loads in the correct order
- We can remove all our additional script tags in index.html
***************************************************************************

3. Add webpack config file

- Created webpack.config.js
- Added some basic configuration
- Modified package.json, so that webpack uses our config file

package.json
{
  "name": "23-2-webpack-fcc",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "webpack  --config webpack.config.js",
  },
  "keywords": [],
  "author": "Temesghen Tekeste",
  "license": "ISC",
  "devDependencies": {
    "webpack": "^5.13.0",
    "webpack-cli": "^4.3.1"
  }
}


webpack.config.js
const path = require('path');

module.exports = {
  mode: 'production',
  entry: path.resolve(__dirname, './src/index.js'),
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'dist'),
  },
  watch: true,
};

By default webpack runs in production mode.
To remove the eval stuff we can say: devtool: "none" or devtool: false
****************************************************************************

4. Webpack Loaders, CSS & SASS

Add first loaders to handle css

- Installed style-loader and css-loader: 
- Configured webpack.config to use both loaders on css files
- Remember the order we use them in webpack.config matters

  > npm install --save-dev style-loader css-loader
  webpack.config.js
  const path = require('path');

module.exports = {
  mode: 'development',
  entry: path.resolve(__dirname, './src/index.js'),
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.css$/,
        use: ["style-loader", "css-loader"]
      }
    ]
  },
  watch: true,
};

css-loader takes your CSS and converts it to JavaScript code and style-loader takes your code and injects it to the DOM by injecting a <style></style> tag

***********************************************************************
5. Add Sass loader, override bootstrap colors

- Changed our main.css to main.scss
- Installed bootstrap locally so we can tweak it
- Installed sass-loader and node-sass
- Updated webpack.config file to include a .scss rule


npm i --save-dev bootstrap
npm i --save-dev sass-loader node-sass


const path = require('path');

webpack.config.js

module.exports = {
  mode: 'development',
  entry: path.resolve(__dirname, './src/index.js'),
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.scss$/,
        use: [
          'style-loader', //3. Inject styles into DOM
          'css-loader', //2. Turns css into commonjs
          'sass-loader', //1. Turns sass into css
        ],
      },
    ],
  },
  watch: true,
};

***********************************************************************
6. Cache busting and plugins
It is about how to prevent brower from caching assets when we don't want them to be cached.

Adding a content hash into the file name can prevent such incident (undesired caching)

************************************************************************

7. Add prod and dev configs, dev-server

- Broke our webpack.config file into 3 files
- webpack.common.js, webpack.dev.js, and webpack.prod.js
- installed webpack-merge to share the common functionality
- updated our package.json to use the new config files
- installed webpack-dev-server and added it to start script in package.json

For merging the config files: 
  npm install --save-dev webpack-merge
  npm install --save-dev webpack-dev-server

******************
webpack.common.js
******************
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
  entry: path.resolve(__dirname, './src/index.js'),
  
  plugins: [
    new HtmlWebpackPlugin({
      template: './src/template.html',
    }),
  ],
  module: {
    rules: [
      {
        test: /\.scss$/,
        use: [
          'style-loader', //3. Inject styles into DOM
          'css-loader', //2. Turns css into commonjs
          'sass-loader', //1. Turns sass into css
        ],
      },
    ],
  },
  watch: true,
};


******************
webpack.dev.js
******************
const common = require('./webpack.common');
const { merge } = require('webpack-merge');
const path = require('path');

module.exports = merge(common, {
  mode: 'development',
  output: {
    filename: 'main.js',
    path: path.resolve(__dirname, 'dist'),
  },
});


******************
webpack.prod.js
******************
const common = require('./webpack.common');
const { merge } = require('webpack-merge');

const path = require('path');

module.exports = merge(common, {
  mode: 'production',
  output: {
    filename: 'main.[contenthash].js',
    path: path.resolve(__dirname, 'dist'),
  },
});

**************
package.json
**************
{
  "name": "23-2-webpack-fcc",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "webpack serve --config webpack.dev.js --open",
    "build": "webpack  --config webpack.prod.js"
  },
  "keywords": [],
  "author": "Temesghen Tekeste",
  "license": "ISC",
  "devDependencies": {
    "bootstrap": "^4.5.3",
    "css-loader": "^5.0.1",
    "html-webpack-plugin": "^4.5.1",
    "node-sass": "^5.0.0",
    "sass-loader": "^10.1.1",
    "style-loader": "^2.0.0",
    "webpack": "^5.13.0",
    "webpack-cli": "^4.3.1",
    "webpack-dev-server": "^3.11.2",
    "webpack-merge": "^5.7.3"
  }
}

**************************************************************************


8. Add html-loader, file-loader, and clean-webpack-plugin

- Added html-loader to automatically require the files we reference in img tags
- Added file-loader to handle the svg,png,jpg,gif files from our images
- Configured file-loader to add our images to an imgs directory in dist
- Also configured it to add a hash to their filenames
- Lastly, added clean-webpack-plugin to our production config to clean out the dist directory each time we build

******************************
About publicpath and outputPath
******************************
https://stackoverflow.com/questions/64294706/webpack5-automatic-publicpath-is-not-supported-in-this-browser

packages
npm i file-loader --save-dev
npm i --save-dev html-loader
npm i --save-dev clean-webpack-plugin

*******************
package.json
*******************
{
  "name": "23-2-webpack-fcc",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "webpack serve --config webpack.dev.js --open",
    "build": "webpack  --config webpack.prod.js"
  },
  "keywords": [],
  "author": "Temesghen Tekeste",
  "license": "ISC",
  "devDependencies": {
    "bootstrap": "^4.5.3",
    "clean-webpack-plugin": "^3.0.0",
    "css-loader": "^5.0.1",
    "file-loader": "^6.2.0",
    "html-loader": "^1.3.2",
    "html-webpack-plugin": "^4.5.1",
    "node-sass": "^5.0.0",
    "sass-loader": "^10.1.1",
    "style-loader": "^2.0.0",
    "webpack": "^5.13.0",
    "webpack-cli": "^4.3.1",
    "webpack-dev-server": "^3.11.2",
    "webpack-merge": "^5.7.3"
  }
}

*******************
webpack.prod.js
*******************
const common = require('./webpack.common');
const { merge } = require('webpack-merge');
const {CleanWebpackPlugin} = require('clean-webpack-plugin');

const path = require('path');

module.exports = merge(common, {
  mode: 'production',
  plugins: [new CleanWebpackPlugin()],
  output: {
    filename: 'main.[contenthash].js',
    path: path.resolve(__dirname, 'dist'),
  },
});
***********************************************************************

9. Add entrypoint for vendor js file, add bootstrap js

- Now we have 2 entry files and 2 bundles
- The vendor file houses code that is less likely to change, 3rd party libraries
- The main file has all of our app code

package.json
****************
{
  "name": "23-2-webpack-fcc",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "webpack serve --config webpack.dev.js --open",
    "build": "webpack  --config webpack.prod.js"
  },
  "keywords": [],
  "author": "Temesghen Tekeste",
  "license": "ISC",
  "devDependencies": {
    "bootstrap": "^4.5.3",
    "clean-webpack-plugin": "^3.0.0",
    "css-loader": "^5.0.1",
    "file-loader": "^6.2.0",
    "html-loader": "^1.3.2",
    "html-webpack-plugin": "^4.5.1",
    "jquery": "^3.5.1",
    "mini-css-extract-plugin": "^1.3.4",
    "node-sass": "^5.0.0",
    "popper.js": "^1.16.1",
    "sass-loader": "^10.1.1",
    "style-loader": "^2.0.0",
    "webpack": "^5.13.0",
    "webpack-cli": "^4.3.1",
    "webpack-dev-server": "^3.11.2",
    "webpack-merge": "^5.7.3"
  }
}

vendor.js
**********
import 'bootstrap';

template.html
************
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"
    />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Webpack Demo</title>
    <!-- CSS only -->
  </head>
  <body class="container">
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
  <a class="navbar-brand" href="#">Navbar</a>
  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
  </button>

  <div class="collapse navbar-collapse" id="navbarSupportedContent">
    <ul class="navbar-nav mr-auto">
      <li class="nav-item active">
        <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="#">Link</a>
      </li>
      <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          Dropdown
        </a>
        <div class="dropdown-menu" aria-labelledby="navbarDropdown">
          <a class="dropdown-item" href="#">Action</a>
          <a class="dropdown-item" href="#">Another action</a>
          <div class="dropdown-divider"></div>
          <a class="dropdown-item" href="#">Something else here</a>
        </div>
      </li>
      <li class="nav-item">
        <a class="nav-link disabled" href="#" tabindex="-1" aria-disabled="true">Disabled</a>
      </li>
    </ul>
    <form class="form-inline my-2 my-lg-0">
      <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">
      <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
    </form>
  </div>
</nav>
    <h1 class="text-center mt-5">Welcome!</h1>
    <div class="alert alert-danger" id="error" role="alert"></div>
    <div class="row mt-5">
      <div class="col">
        <div class="input-group">
          <input type="text" id="numberOne" class="form-control" />
          <div class="input-group-append input-group-prepend">
            <span class="input-group-text">+</span>
          </div>
          <input type="text" id="numberTwo" class="form-control" />
        </div>
      </div>
      <div class="col">
        <button id="addValues" class="btn btn-primary">Add Values</button>
      </div>
    </div>
    <div class="card mt-5">
      <div class="card-body">The result is: <span id="result"></span></div>
    </div>
    <img src="./assets/webpack.svg" />
    <img src="./assets/nemo.jpeg" />
    <!-- <img src={require('assets/webpack.svg').default}/> -->
  </body>
</html>


**************************************************************
10. Minify JS, CSS, and HTML in production

- Extracted CSS into own file in production
- Minified CSS in production
- Added TerserJS back in to minify JS in production
- Minified HTML in production as well


 npm i --save-dev mini-css-extract-plugin

 These two plugins are no longer needed
 optimize-css-assets-webpack-plugin
 terser-webpack-plugin